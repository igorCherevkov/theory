1.  Что такое Git? Для чего он нужен?

Git - система контроля версий, которая позволяет отслеживать изменения файлов, добавлять различные изменения 
в новые ветки, откатывать эти изменения.
GitHub - веб-приложение, в котором хранится наш репозиторий удалённо, созданный с помощью гита, гитхаб нужен для 
параллельной работы нескольких разработчиков.

2.  Что такое репозиторий, ветка, коммит, index, HEAD?

Репозиторий - хранилище нашего кода и информации об его изменениях. На локальном уровне, репозиторий - просто наша папка,
за которой следит гит. 
Ветка - независимая линия разработки. Ветки позволяют работать над разными функциями и фиксами без влияния
на основную ветку разработки.
Коммит - сохранённое изменение в нашем репозитории, то есть весь наш код в определённый момент времени.
index - все файлы, которые были изменены и которые мы хотим добавить в коммит.
head - указатель на текущую ветку и коммит. Он показывает в каком состоянии сейчас находится наш репо.

3.  Опишите два способа создания репозитория. Что такое origin? Как это
посмотреть? Как поменять адрес на другой?

git init

git clone <url> - клонирует репо и автоматически подключит нас к удалённому репозиторию

origin - по умолчанию название удалённого репозитория.
git remote rename origin <name>

git remote: 
git remote -v - посмотреть к какому удалённому репо мы подключены
git remote set-url <url> - изменить url нашего удалённого репо
git remote add origin <url> - подключиться к удалённому репо

git remote remove origin - удалит подключение к удалённому репо

4.  Где в этом проекте хранятся все данные для работы git ?

Все данные хранятся в скрытой папке .git. Она содержит такие файлы как 
head - указатель на текущую ветку и коммит.
config - он содержит настройки репозитория
hooks - скрипты, которые автоматически  выполняются перед какими либо действиями (например перед коммитом - pre-commit)
objects - директория, в которой хранятся все объекты репозитория: коммиты, ветки.
refs - содержит ссылки на ветки
index - файл в котором хранится вся информация о подготовленных к коммиту изменениях.

5.  Как проиндексировать изменения? Как отменить проиндексированные
изменения? Как отменить не проиндексированные изменения?

git add . - индексирует файлы директории, в которой мы находимся
git add -A - индексирует все изменения, то есть если мы находимся не в главной директории, то нужно использовать эту команду

git rm --cached <file-name> - удалит файл из индекса, но не удалит из репо
git rm -f <file-name> - удалит файл из индекса и из репозитория
git rm --cached -r .

6.  Как посмотреть какие файлы будут добавлены в новый коммит?

git status (по умолчанию с флагом --long) - он показывает информацию о текущей ветке, список изменённых файлов
и список проиндексированных файлов
git status -s - выводит краткую информацию(список изменённых файлов в репозитории и список проиндексированных файлов)

7.  Как создать коммит? Как добавить коммиту сообщение? Как изменить
последний коммит (например сообщение)?

git commit - если мы напишем, IDE нам выдаст окно, где посоветует написать сообщение
git commit -m "commit message" - сообщение
git commit --amend -m "new message" - новое сообщение
git commit --amend - все файлы из индекса попадут в последний коммит, а так же откроется текстовый редактор, в котором 
можно будет ввести новое сообщение

8.  Что такое файл .gitignore? Какие файлы и папки нужно в него добавлять и
зачем?

Файл .gitignore нужен для указания файлов и папок, которые не будут отслеживаться гитом.
Туда нужно включать файлы конфигурации, файлы которые были созданы IDE (например .vscode), файлы установленных
пакетов.

9.  Что делать, если файл с конфигурацией (например ключами от облачных
сервисов) попал в индекс? попал в удаленный репозиторий? 

Удалить его из индекса
git rm --cached <file-name>
А затем добавить его в gitignore

попал в удаленный репозиторий:
git reset HEAD~1 - делаем откат коммита до последнего(тк HEAD~1), файлы будут не проиндексированы, добавляем 
config файл в .gitignore, индексируем остальные файлы и делаем коммит
git push -u origin master(main) - заливаем изменения в удалённый репо 

git reset --soft HEAD~1 - делает откат коммита до последнего и сохраняет файлы в индексе, затем нужно будет удалить
файл из индекса, закомитить и залить в репо
git reset --mixed HEAD~1 - стандартный флаг, то есть удаляет из индекса и делает откат
git reset --hard HEAD~1 - удаляет все изменения из репозитория

10. Как удалить файлы из проекта (репозитория)? В чем отличия от стандартного удаления файлов в системе?

нужно удалить файл из системы, затем удалить файл из индекса git и сделать коммит.
Так как гит следит за любыми изменениями, файл всё равно будет храниться в истории гита. После удаления
останется информация и о старом файле и о том, что файл был удалён.

11. Как заполнить информацию об авторе коммитов для локального репозитория?
Как сделать так чтобы это происходило во всех новых проектах,  где это не
задано локально?

git config user.name "Igor"
git config user.email "jeverlius@mail.ru"
чтобы происходило во всех новых проектах, нужно добавить флаг --global

git config --list - проверить информацию

12. Как залить наши новые коммиты в удаленный репозиторий? Когда использовать флаг --force?

сначала нужно подключиться к удалённому репо:
git remote add origin <url>

git push origin master(main)
git push --force origin master(main) - нужно использовать, когда коммиты были либо удалены либо изменены,
т.е. флаг принудительно перезапишет историю и на удалённом репо
git push -u origin master(main) - запомнит название и url

13. Как подтянуть свежие изменения с удаленного репозитория?

git pull origin <branch name> - выполняет две операции одновременно: fetch и merge
git fetch origin - Эта команда извлекает все ветки и изменения из удалённого репозитория origin, но не вливает 
их в вашу текущую ветку.

14. Как создать ветку (2 способа)?

git branch <branch name>
git checkout -b <branch name> - создает и переходит на новую ветку
git switch -c (те --create) <branch name> - создает и переходит на новую ветку
Одной из ключевых особенностей git switch является её поведение в отношении незакоммиченных изменений в 
текущей рабочей директории. Если вы попытаетесь переключиться на другую ветку, имея несохранённые изменения, 
Git не позволит это сделать, предоставляя вам выбор: либо сохранить изменения, либо отменить их.
Команда git switch создана для операций с ветками, что делает её использование более интуитивно 
понятным и безопасным для пользователей, чем git checkout, которая используется для различных целей, 
включая переключение между ветками и восстановление файлов.

15. Как перейти из одной ветки в другую ветку?

git checkout <branch name>
git switch <branch name>

16. Как посмотреть список веток и в какой мы сейчас находимся?

git branch, та, в которой мы сейчас находимся, помечена звёздочкой

17. Как соединять ветки? Почему возникают конфликты и как их решать?

git merge <branch name> - чтобы слить нашу текущую ветку с указанной
Изменения в одних и тех же строках: Если две ветки вносили изменения в одни и те же строки файла, Git 
не может определить, какие изменения должны быть сохранены.
Структурные конфликты: Когда внесены изменения в разные части файла, но эти изменения противоречат друг другу 
с точки зрения синтаксиса или структуры.
Нужно вручную разрешить конфликт, в IDE есть специальные средства для этого, то есть откроется окно, 
где будет 3 файла - 2 конфликтных и файл с результатом, затем нужно сохранить файл с результатом, 
добавить его в индекс и написать команду git merge --continue

18. Как сбрасывать изменения? Как откатываться до какого-нибудь коммита?

git reset --hard <commit hash> - откатиться до коммита с указанным хешем и удалит остальные
git reset --soft <commit hash> - делает откат коммита до последнего и сохраняет файлы в индексе
git reset --mixed <commit hash> - является стандартным флагом, то есть можно без него, делает откат и удаляет
файлы из индекса, но не из репо

19. Как посмотреть историю коммитов?

git log - выведет список всех коммитов с информацией о каждом коммите, такой как автор, дата, и сообщение коммита.
git log --oneline - вывод каждого коммита в одной строке с коротким идентификатором коммита и сообщением
git log -p - показывает изменения, внесённые каждым коммитом
git log -n 5  # Покажет последние 5 коммитов

20. Как удалить ветку локально? Как удалить ветку в удаленном (от слова дальний, а не удалять) репозитории.

нужно переключить с той ветки, которую мы хотим удалить, иначе будет ошибка
git branch -d <branch name> - если ветка была слита(смержена с другой)
git branch -D <branch name> - --force-delete удаляет ветку независимо от того, была она слита или нет.
git push origin --delete <branch name> (ветка в git останется, потрётся только в github)

----

при добавлении веток на удалённый репо открывается pull request, то есть мы просим внести изменения, а уже
в веб-приложении GitHub этот request можно либо принять либо отклонить

git rebase может всю ветку перенести на другую, Это означает, что Git применяет все коммиты, которые вы 
сделали в текущей ветке, поверх последнего коммита базовой ветки.

git rebase -i --root - позволяет отредактировать index commit в графическом редакторе, стерев 
всю информацию об коммите и создав пустой новый

---
git restore — это команда Git, используемая для восстановления файлов в рабочем каталоге до определенного состояния.
git restore . - восстановить все файлы до состояния последнего коммита
git restore <file-name> - восстановить файл до состояния последнего коммита
git restore --source <commit> <file-name> - восстановить файл до определённого коммита
git restore --staged <file-name> - убрать файлы из индекса

---
git reset — это мощная команда в Git, которая позволяет отменять изменения, сделанные в репозитории. Она может изменять текущий 
указатель HEAD и состояние индекса (staging area).
git reset --soft <commit> - В этом режиме HEAD перемещается к указанному коммиту, но изменения сохраняются в индексе и рабочем каталоге.
git reset --mixed <commit> - Этот режим перемещает HEAD к указанному коммиту и сбрасывает индекс, но изменения остаются в рабочем каталоге.
git reset --hard <commit> - Этот режим перемещает HEAD к указанному коммиту и сбрасывает индекс и рабочий каталог.
git reset <file-name> - удалить файлы из индекса, и оставить их в репо